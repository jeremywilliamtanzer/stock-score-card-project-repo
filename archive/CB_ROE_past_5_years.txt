{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "from api_key import key\n",
    "from datetime import date\n",
    "from dateutil.relativedelta import relativedelta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "tickers = (input('Input short stock name: '),)\n",
    "    \n",
    "def get_ROE(ticker):\n",
    "    \"\"\"Get Return on Equity for given stocks\n",
    "    over a 5 year date range in yearly timespan meaning comparing the current ROE\n",
    "    to the ROE of (current - 4).\n",
    "    Being in March 2023 we would compare ROE from March 2022 with ROE from 2018.\n",
    "    \"\"\"\n",
    "    report_date_1 = date.today()\n",
    "    report_date_2 = date.today()- relativedelta(years=5)\n",
    "    timespan = 'annual'\n",
    "\n",
    "    url_1 = f'https://api.polygon.io/vX/reference/financials?ticker={ticker}&period_of_report_date.lte={report_date_1}&timeframe={timespan}&include_sources=true&apiKey={key}'\n",
    "    url_2 = f'https://api.polygon.io/vX/reference/financials?ticker={ticker}&period_of_report_date.lte={report_date_2}&timeframe={timespan}&include_sources=true&apiKey={key}'\n",
    "    print(f'Fetching data for {ticker}')\n",
    "    response_net_income_current = requests.get(url_1).json()\n",
    "    net_income_1 = response_net_income_current['results'][0]['financials']['income_statement']['net_income_loss']['value']\n",
    "    response_equity_current = requests.get(url_1).json()\n",
    "    equity_1 = response_equity_current['results'][0]['financials']['balance_sheet']['equity']['value']\n",
    "    response_net_income_previous = requests.get(url_2).json()\n",
    "    net_income_2 = response_net_income_previous['results'][0]['financials']['income_statement']['net_income_loss']['value']\n",
    "    response_equity_previous = requests.get(url_2).json()\n",
    "    equity_2 = response_equity_previous['results'][0]['financials']['balance_sheet']['equity']['value']\n",
    "    ROE = (((net_income_1 / equity_1) / (net_income_2 / equity_2)) - 1) * 100\n",
    "    print(ROE)\n",
    "    #return {'ROE': float(ROE)}\n",
    "\n",
    "# ROE Past X Years = ((Net Income (n) / Equity (n)) / (Net Income(n - X) / Equity(n - X)) - 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "stock-env",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
